---

- name: Query existing Ollama models
  when: ollama_pull_models | length > 0 or ollama_delete_models | length > 0
  ansible.builtin.uri:
    url: "http://{{ ollama_host }}:{{ ollama_port }}/api/tags"
    method: GET
    timeout: 30
  register: _current_ollama_models
  tags:
    - ollama
    - models

- name: Set existing Ollama models
  ansible.builtin.set_fact:
    existing_models: "{{ _current_ollama_models.json.models | default([]) | map(attribute='name') | list }}"
  tags:
    - ollama
    - models

- name: Ensure desired Ollama models are present
  vars:
    _model_name: "{{ item.name }}{{ ':' + (item.tag | default('latest')) }}"
    _model_exists: "{{ _model_name in existing_models }}"
  when:
    - ollama_pull_models | length > 0
    - not _model_exists
  loop: "{{ ollama_pull_models }}"
  loop_control:
    label: "{{ _model_name }}"
  ansible.builtin.uri:
    url: "http://{{ ollama_host }}:{{ ollama_port }}/api/pull"
    method: POST
    status_code: 200
    body_format: json
    body:
      model: "{{ item.name }}{{ ':' + item.tag if item.tag is defined else '' }}"
      stream: false
    timeout: "{{ ollama_model_api_timeout }}"
  register: ollama_pull_result
  ignore_errors: false
  tags:
    - ollama
    - models

- name: Ensure undesired Ollama models aren't present
  vars:
    _model_name: "{{ item.name }}{{ ':' + (item.tag | default('latest')) }}"
    _model_exists: "{{ _model_name in existing_models }}"
  when:
    - ollama_delete_models | length > 0
    - _model_exists
  loop: "{{ ollama_delete_models }}"
  loop_control:
    label: "{{ _model_name }}"
  ansible.builtin.uri:
    url: "http://{{ ollama_host }}:{{ ollama_port }}/api/delete"
    method: DELETE
    status_code: 200
    body_format: json
    body:
      model: "{{ item.name }}{{ ':' + item.tag if item.tag is defined else '' }}"
      stream: false
    timeout: "{{ ollama_model_api_timeout }}"
  register: ollama_delete_result
  ignore_errors: false
  tags:
    - ollama
    - models
